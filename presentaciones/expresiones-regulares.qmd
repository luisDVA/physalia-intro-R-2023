---
title: "Expresiones regulares"
author: Luis D. Verde Arregoitia
format:
  revealjs:
    theme: curso_styles.scss
    chalkboard: true
    transition: fade
    progress: true
    preview-links: true
    hide-inactive-cursor: true
    highlight-style: printing
    pause: true
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

```{r setup}
#| echo: false
#| message: false
#| warning: false

library(janitor)
library(tidyr)
library(stringr)
library(dplyr)
library(datos)
library(gt)
```

# Expresiones regulares para trabajar con cadenas de texto

## ¬øExpresiones regulares?

. . . 

* Conocidas como _regex_, R.E., E.R., o _regexp_ (singular)

* Lenguaje conciso para describir patrones de texto

</br>

### Cadenas (üß∂strings) de caracteres codificadas especificamente para empatar patrones en otras cadenas de texto

## Expresiones regulares

En la pr√°ctica, un lenguaje de programaci√≥n con su propia sintaxis y terminolog√≠a

</br>

**entrada:** una cadena de texto que se compila en un mini programa construido espec√≠ficamente para identificar un patr√≥n

</br>
Pueden usarse para empatar, buscar, reemplazar, o partir texto   

## Cadenas de texto (üß∂Strings)

Un conjunto de caracteres que componen un elemento de un vector:

:::{.med-code}
```{r}
cadena_de_texto <- "Esta oraci√≥n es una cadena"
```
:::

Podemos almacenar varias cadenas en un vector de texto:

:::{.med-code}
```{r}

mascotas <-  c("perro","gato","loro","perro")
```
:::

## Cadenas de texto

::: columns
::: {.column width="50%"}
Los nombres de variables, objetos, y los valores en un data frame tambi√©n pueden ser cadenas de texto:

```{r}
#| eval: true
#| include: false

library(gt)
library(tibble)
library(magrittr)
bebidas_df <- tibble(bebida=c("caf√©","t√©","jugo"),precio=c(3.50,2.99,3.20))
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false

bebidas_df %>%
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "yellow"),
       cell_text(size = '35px')
    ),
    locations = cells_body(
      columns = vars(bebida)
    )
  ) %>%
  tab_options(column_labels.background.color = "yellow")
```
:::
:::

## R distingue entre may√∫sculas y min√∫sculas

La misma letra en may√∫scula y m√≠nuscula se trata como un caracter diferente

:::{.big-code}
```{r}
#| eval: true
#| echo: true
"rata"=="RATA"
```

```{r}
#| echo: true
"rata"=="raTa"
```
:::

## Por defecto las expresionas regulares tambi√©n distinguen entre may√∫sculas y m√≠nusculas

Podemos:

* Construir expresiones que no distingan
* 'Ignorar' esta distinci√≥n al momento de empatar caracteres

## ¬øPara qu√© aprender a escribir expresiones regulares?

. . . 

::: {.incremental}

* Ahorrar tiempo al buscar patrones, transformar texto, describir patrones, extraer partes de palabras, etc.

* Una sola expresi√≥n regular puede reemplazar decenas de l√≠neas de c√≥digo 

* Sirven en pr√°cticamente cualquier lenguaje de programaci√≥n o aplicaci√≥n de l√≠nea de comandos

:::

## Primeros pasos con regex

::: columns
::: {.column width="33%"}
### Expresi√≥n regular

</br> gato
:::

:::  {.column width="33%"}
### Entrada

</br></br> "Ese gato feo"
:::

::: {.column width="33%"}
### Resultado

</br></br> Ese [gato]{style="color: orange"} feo
:::
:::

La expresi√≥n regular para encontrar una secuencia fija de caracteres es esa misma secuencia

> busca una **g** seguida de una **a** luego **t** y **o** (todos estos caracteres juntos y en ese orden de izq. a der.)

## Probando regex

¬øEst√° funcionando mi expresi√≥n?

-   [rubular](https://rubular.com/) - Michael Lovitt

-   [regex101](https://regex101.com/) - Firas Dib

-   [regexr](https://regexr.com/) - Grant Skinner

-   [regexpal](https://www.regexpal.com/) - Dan's Developer Tools


## Ejercicio {background-color="#a4c5ff"}

Abrir [rubular](https://rubular.com/), [regex101](https://regex101.com/), [regexr](https://regexr.com/), o [regexpal](https://www.regexpal.com/)

Probemos el primer ejemplo
_gato_ y "ese gato feo"

## Caracteres literales y metacaracteres

Tanto las cadenas de texto como las expresiones regulares se componen por caracteres

</br>

Podemos agrupar a los caracteres dependiendo de su comportamiento

## Literales

Si la entrada es **"pato"** y la E.R. es [pato]{style="color: orange"}  

</br> 

Habr√° coincidencia cuando los caracteres [p]{style="color: orange"}, [a]{style="color: orange"}, [t]{style="color: orange"} y [o]{style="color: orange"} aparezcan consecutivamente en el texto de entrada


## Caracteres literales

[p]{style="color: orange"}, [a]{style="color: orange"}, [t]{style="color: orange"} y [o]{style="color: orange"} ser√≠an ejemplos de caracteres literales

</br> Se encuentran a s√≠ mismos

## 

::: {.callout-note}
##
El poder y la flexibilidad de las expresiones regulares viene de su capacidad de describir patrones complejos
:::

</br>
Si un patron de texto se puede describir verbalmente, seguramente se puede codificar en una expresi√≥n regular


## Patrones posibles

- "rata" pero no "bata"

- "pollo" pero solo si el esta secuencia est√° al principio de la cadena de texto

- n√∫meros (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

- Variantes ortogr√°ficas "Brasil" o "Brazil" 

- Palabras con terminaciones espec√≠ficas (DAE, NAE, etc.)

- Fechas

- Correos electr√≥nicos

## M√°s posibilidades 

- C√≥digos postales

- N√∫meros entre par√©ntesis

- Usuarios de Twitter (comienzan con \@, sin espacios ni s√≠mbolos,  \<16 caracteres)

- Palabras en MAY√öSCULA

## Metacaracteres

Un peque√±o subconjunto de caracteres nos ayudan a describir patrones m√°s complejos porque tienen comportamientos especiales y no se buscan solo a s√≠ mismos.  


Cuando aparecen en una E.R., se interpretan de una manera especial.  


Incluyen: [\[\]\^\$.\|?\*+()]{style="color: orange"}, que est√°n apartados para fines especiales

## Comodines

Para empatar caracteres desconocidos

**`.`** empata cualquier caracter una vez

</br>
[m..l]{style="color: orange"} empata "[miel]{style="background-color: yellow"}" pero no "miguel"


## Conjuntos de caracteres

Empatan uno o m√°s caracteres especificados con corchetes

`[ ]` para buscar conjuntos de caracteres

</br>

[\[mr\]ata]{style="color: orange"} empata "[mata]{style="background-color: yellow"}", y "[rata]{style="background-color: yellow"}", pero no "bata"


## Negando conjuntos de caracteres

[\[\^\]]{style="color: orange"}    excluye conjuntos de caracteres 

> `^` va al principio del conjunto

</br>

[\[\^aoeiou\]]{style="color: orange"} solo empata consonantes

[\[\^R\]]{style="color: orange"} todo excepto R may√∫scula

## Intervalos de caracteres

Indican una serie de caracteres contiguos dentro de un conjunto de caracteres

El gui√≥n [-]{style="color: orange"} dentro de un conjunto de caracteres sirve para abreviar secuencias alfab√©ticas o num√©ricas

[\[A-D\]]{style="color: orange"} cualquier letra may√∫scula entre A y D

[\[5-8\]]{style="color: orange"} cualquier d√≠gito entre 5 y 8

[\[A-Za-z\]]{style="color: orange"} cualquier letra


## Aserciones de tipo l√≠mite (anchors)

Especifican la posici√≥n relativa del patr√≥n que estamos buscando

[ \^ ]{style="color: orange"}    comienza con\
[ \$ ]{style="color: orange"}    termina con\

</br>

[  \^mil]{style="color: orange"} empata  "[mil]{style="background-color: yellow"}itar" pero no "familia"

[ing\$]{style="color: orange"} empata "Bo[ing]{style="background-color: yellow"}" pero no "ingeniero"


## Ejercicio {background-color="#a4c5ff"}

-   ¬øC√≥mo podemos empatar  **mano**, **milo**, **malo**, y **mito**?

-   ¬øC√≥mo podemos empatar Cristian, Kristian, y Crystian usando conjuntos de caracteres?


## Pr√°ctica {background-color="#a4c5ff"}

- ¬øCu√°l de estas E.R. empata **`mila`** al principio de una cadena de texto?

::: columns
::: {.column width="25"}
a)  \^mila
:::

::: {.column width="25"}
b)  mila
:::

::: {.column width="25"}
c)  \$mila
:::

::: {.column width="25"}
d)  mila\^
:::
:::

## Cuantificadores

Indican el n√∫mero de caracteres o expresiones que deben coincidir

[ ? ]{style="color: orange"}   Cero o una\
[ \* ]{style="color: orange"}   Cero o m√°s\
[ + ]{style="color: orange"}   Una o m√°s\
[ {}]{style="color: orange"}    _n_ veces 

> los cuantificadores aplican al caracter que tienen a su izquierda

## Cuantificadores

[Isabell?a]{style="color: orange; font-weight: bold"} coincide con "[Isabella]{style="background-color: yellow"}" y con "[Isabela]{style="background-color: yellow"}"

> 0 o 1

[go\*l!]{style="color: orange; font-weight: bold"} coincide con: "[gl!]{style="background-color: yellow"}", "[gol!]{style="background-color: yellow"}", "[gooool!]{style="background-color: yellow"}", "[goooooooool!]{style="background-color: yellow"}", etc.

> 0 o m√°s

## Cuantificadores

[no+]{style="color: orange; font-weight: bold"} empata "[no]{style="background-color: yellow"}", "[nooo]{style="background-color: yellow"}", "[noooooo]{style="background-color: yellow"}", etc, pero no "n"

> una o m√°s

[a{2}]{style="color: orange; font-weight: bold"} empata  "port[aa]{style="background-color: yellow"}viones" pero no "portaviones"

> n veces

## Ejercicio {background-color="#a4c5ff"}

- Empatar **mira**, **miiiiiiiiiira**, y **miiira**  

- Empatar Computador, computadora, computador, y Computadora (usar juegos de caracteres y cuantificadores)


## Coincidencias alternativas

Separa alternativas de b√∫squeda

[ \| ]{style="color: orange; font-weight: bold"}    una u otra opci√≥n

</br>

[Bra(s\|z)il]{style="color: orange; font-weight: bold"} ecuentra Brasil y Brazil. 

> las dos alternativas van entre par√©ntesis

## Construcciones especiales y escapes

[ \\ ]{style="color: orange; font-weight: bold"}    indica una construcci√≥n especial abreviada o sirve para poder usar caracteres especiales como literales

## Escapes

[qu√©\\\\?]{style="color: orange; font-weight: bold"} para poder buscar el signo de interrogaci√≥n literalmente

> en R la diagonal tambi√©n se tiene que escapar

*Los metacaracteres dentro de conjuntos de caracteres se vuelven literales*

## Construcciones especiales

Para abreviar conjuntos de caracteres  

[\\w]{style="color: orange; font-weight: bold"}  letras, gui√≥n bajo, y n√∫meros  

[\\d]{style="color: orange; font-weight: bold"}  d√≠gitos  

[\\t]{style="color: orange; font-weight: bold"}tabulaci√≥n  

[\\n]{style="color: orange; font-weight: bold"}   saltos de l√≠nea  

[\\s]{style="color: orange; font-weight: bold"}  espacio  

[\\b]{style="color: orange; font-weight: bold"}  l√≠mite de palabra  


## L√≠mites de palabra

[\\b]{style="color: orange; font-weight: bold"}

Marca la posici√≥n en la que un caracter de palabra (letras, n√∫meros, gui√≥n bajo) no va seguido o precedido por otro caracter de palabra (espacios o el inicio o fin de la cadena)

El l√≠mite de una palabra encontrada no se incluye en el resultado 

**Antes de**

[\\bmila]{style="color: orange; font-weight: bold"} encuentra "la [mila]{style="background-color: yellow"}nesa" pero no "Camila"

**Despu√©s de**

[arte\\b]{style="color: orange; font-weight: bold"} encuentra "salud[arte]{style="background-color: yellow"} hoy" pero no "artesanal"


## Ejercicio {background-color="#a4c5ff"}

- Con la entrada "Los tacos de canasta en Tabasco se abarrotaron"

Expliquemos qu√© pasa cuando usamos estas tres E.R.

a)  ta\
b)  \\bta\
c)  ta\\b

## Combinaciones

[\^can.\*]{style="color: orange; font-weight: bold"} empata "[can]{style="background-color: yellow"}", "[can]{style="background-color: yellow"}ino", "[can]{style="background-color: yellow"}asta", y "[can]{style="background-color: yellow"}adiense"


[A.\*n]{style="color: orange; font-weight: bold"} cualquier cadena de texto que empiece con "**A**" y termine con "**n**"

[\^\[a-z\]+\$]{style="color: orange; font-weight: bold"} solo min n√∫sculas


[\\w+\\b\$]{style="color: orange; font-weight: bold"} la √∫ltima palabra en una cadena

"12 de [marzo]{style="background-color: yellow"}"\
"Liomys [pictus]{style="background-color: yellow"}"

[\^\\w+\\b]{style="color: orange; font-weight: bold"} primera palabra
"[12]{style="background-color: yellow"} de marzo"\
"[Liomys]{style="background-color: yellow"} pictus"


## Ejercicio {background-color="#a4c5ff"}

Empatemos:

1.  Oraciones que terminen con un punto
2.  Cuatro d√≠gitos
5.  Cadenas sin la letra ***s***

# Expresiones regulares en R

## 

Podemos crear subconjuntos de filas y columnas mediante coincidencias entre expresiones regulares y nombres de variables o con sus valores

##
![](imgs/regexsubconjuntos.png){fig-align="center"}

## üì¶ `stringr`

Funciones para manipular cadenas de texto

- Los nombres de las funciones tienen el prefijo **`str_`**

- El primer argumento de sus funciones es la cadena de texto de inter√©s

- Funci√≥n **`regex()`** para modificar el comportamiento de b√∫squeda

`ignore_case=TRUE` para dejar de distinguir entre may√∫sculas y min√∫sculas

## `stringr` - ejemplos

**¬øCoincidencias?**

:::{.med-code}
```{r}
#| output-location: slide
str_detect(string = c("catalogo", "aguacate",
"pera"),
 pattern = "cat")
```
:::

Regresa un vector V/F de la misma longitud que la entrada

## `stringr` - m√°s ejemplos

**¬øCu√°les elementos coinciden?**

:::{.med-code}
```{r}
#| output-location: slide
str_which(string = c("catalogo", "aguacate", "pera"), pattern = "cat")
```
:::

Regresa el √≠ndice de los elemenots con coincidencias

## `stringr` - reemplazar coincidencias

:::{.med-code}
```{r}

str_replace(string = c("anthonyi", "daviesi", "jonesi"),
            pattern = "i$",
            replacement = "ii")
```
:::

## `stringr` - funci√≥n `regex()`

**Sin distinci√≥n entre MAYUSCULAS y min√∫sculas**

```{r}


str_replace(string = c("anthonyI", "daviesi", "jonesi"),
            pattern = regex("i$",ignore_case = TRUE),
            replacement = "ii")
```

## Ejercicio - `stringr` {background-color="#a4c5ff"}

Probemos estas expresiones contra este vector usando `str_detect`. Explicar las coincidencias.

E. regulares  

1. \^ave\
2. \^\[a-z\]+\$\
3. \\d

```{r}
#| echo: true
#| eval: false

vec_texto <- c("Aves y reptiles","hamburguesa",
                 "34","(34)","rAta","avenida",
                 "2011_julio","inecol","INECOL")
```

## Manipulando datos con expresiones regulares

</br>

Elegir/descartar filas y columnas  

Reemplazar o modificar valores  

Extraer o borrar partes de cadenas de texto  

## Expresiones regulares y üì¶ `dplyr` 

</br>

La funci√≥n auxiliar **`matches()`** acepta expresiones regulares para seleccionar variables que contengan coincidencias


## Seleccionando variables

Datos de ping√ºinos `pinguinos` de üì¶ `datos`

:::{.med-code}
```{r}
library(datos)
data(pinguinos)
names(pinguinos)
```
:::

## 

:::{.med-code}
```{r}
pinguinos %>% 
  select(especie, matches("larg")) %>% 
  sample_n(3)
```
:::

## Filtrando filas 

Datos de paises del paquete üì¶ `datos`

```{r, eval=FALSE}
library(datos)
data(paises)
```

:::{.med-code}
```{r}
paises %>% select(pais,continente) %>% 
  sample_n(4)
```
:::

## Coincidencias en filas

Paises con "z" en su nombre

```{r}
#| eval: true
#| echo: true
paises %>% select(pais,continente) %>% 
  filter(str_detect(pais,"z")) %>% 
  distinct()
```


# Informaci√≥n repetida

## Valores repetidos

-   Definici√≥n variable pero generalmente dos o m√°s copias del mismo registro u observaci√≥n

### Problemas posibles

-   Infl√°n datos

-   Costos de repetici√≥n no intencional

-   Resultados imprecisos

## Identificando y eliminando duplicados

-   Identificar con `get_dupes()` del paquete üì¶ `janitor`

-   Eliminar con `distinct()` de üì¶ `dplyr`

## Repetici√≥n

-   En todas las variables (copias id√©nticas de una fila)

-   En las variables que definen nuestras unidades observacionales

-   En conjuntos arbitrarios de variables

## 

::: panel-tabset

### ordenes_pizza

```{r}
#| eval: true
#| echo: false

tibble::tribble(
    ~IDusuario,            ~Direccion,    ~Colonia,    ~Alcaldia,
    "Pablitoo",  "Cafetal 395 Casa 2", "San Angel", "A. Obreg√≥n",
    "susana24",         "Fresnos 114", "San Angel", "A. Obreg√≥n",
    "susana24",         "Fresnos 114", "San Angel", "A. Obreg√≥n",
  "jd.adriana",  "Cafetal 395 Casa 8", "San Angel", "A. Obreg√≥n",
  "JuanManuel", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n",
   "JoaquinED", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n",
      "e_ric2", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n"
  ) %>% 
  gt() %>%
  tab_style(
    cell_text(size = "26px"),
    locations = list(
      cells_body(),
      cells_column_labels(everything()),
      cells_title()
    )
  )

```

### datos

```{r}
#| eval: true
#| echo: true

ordenes_pizza <- 
tibble::tribble(
    ~IDusuario,            ~Direccion,    ~Colonia,    ~Alcaldia,
    "Pablitoo",  "Cafetal 395 Casa 2", "San Angel", "A. Obreg√≥n",
    "susana24",         "Fresnos 114", "San Angel", "A. Obreg√≥n",
    "susana24",         "Fresnos 114", "San Angel", "A. Obreg√≥n",
  "jd.adriana",  "Cafetal 395 Casa 8", "San Angel", "A. Obreg√≥n",
  "JuanManuel", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n",
   "JoaquinED", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n",
      "e_ric2", "Hidalgo 11 Depto 1B", "Campestre", "A. Obreg√≥n"
  )
```
:::

## Identificar con `get_dupes()` 

```{r}
ordenes_pizza %>%
  get_dupes() # todas las variables (por defecto)
```

-   A√±ade una variable `dupe_count` que cuantifica las filas con valores duplicados

-   Acomoda las variables de inter√©s al principio del data frame resultante

## 

`get_dupes()` asignando una variable para definir nuestra unidad observacional

¬øAlguien orden√≥ m√°s de una vez?

```{r}
ordenes_pizza %>%
  get_dupes(IDusuario)
```

## 

`get_dupes()` con combinaciones de variables

-   Filas repetidas en direcci√≥n \* colonia

> accepta funciones auxiliares de üì¶ `tidyselect`

```{r}
ordenes_pizza %>%
  get_dupes(Direccion, starts_with("Col"))
```

## 

Descartar con `distinct()` de üì¶ `dplyr`

. . .

```{r}
ordenes_pizza %>%
  distinct() # todas las variables
```

## 

`distinct()` con la variables que definen las unidades observacionales

```{r}
ordenes_pizza %>%
  distinct(IDusuario, .keep_all = TRUE)
```

> `.keep_all` para retener o no las dem√°s columnas

## 

`distinct()` con combinaciones de variables

-   Combinaciones √∫nicas de direcci√≥n \* colonia

```{r, eval=TRUE}
ordenes_pizza %>%
  distinct(Direccion,Colonia)
```

## 

> ‚ö†Ô∏è Si `.keep_all = TRUE` y hay valores duplicados en otras variables, `distinct` solo retiene la primera fila

```{r}
ordenes_pizza %>%
  distinct(Direccion,Colonia, .keep_all = TRUE)
```

## Ejercicio {background-color="#a4c5ff"}

- Cargar el archivo `murcielagos.csv`

- ¬øDe cu√°ntas localidades √∫nicas provienen estos registros?

- Exportar un archivo con las localidades √∫nicas y nombres de columna en espa√±ol


{
  "hash": "efacf1c97d75411cd24a3860f2ef8fcf",
  "result": {
    "markdown": "---\ntitle: \"Expresiones regulares\"\nauthor: Luis D. Verde Arregoitia\nformat:\n  revealjs:\n    theme: curso_styles.scss\n    chalkboard: true\n    transition: fade\n    progress: true\n    preview-links: true\n    hide-inactive-cursor: true\n    highlight-style: printing\n    pause: true\neditor: source\nknitr:\n  opts_chunk:\n    dev: \"ragg_png\"\n    retina: 3\n    dpi: 200\nexecute:\n  freeze: auto\n  cache: true\n  echo: true\n  fig-width: 5\n  fig-height: 6\n---\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/setup_d93923fcf3e206e4d08fae6b7d371139'}\n\n:::\n\n\n# Expresiones regulares para trabajar con cadenas de texto\n\n## ¿Expresiones regulares?\n\n. . . \n\n* Conocidas como _regex_, R.E., E.R., o _regexp_ (singular)\n\n* Lenguaje conciso para describir patrones de texto\n\n</br>\n\n### Cadenas (🧶strings) de caracteres codificadas especificamente para empatar patrones en otras cadenas de texto\n\n## Expresiones regulares\n\nEn la práctica, un lenguaje de programación con su propia sintaxis y terminología\n\n</br>\n\n**entrada:** una cadena de texto que se compila en un mini programa construido específicamente para identificar un patrón\n\n</br>\nPueden usarse para empatar, buscar, reemplazar, o partir texto   \n\n## Cadenas de texto (🧶Strings)\n\nUn conjunto de caracteres que componen un elemento de un vector:\n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-1_2c459df16c5a83d82b771447e905c58d'}\n\n```{.r .cell-code}\ncadena_de_texto <- \"Esta oración es una cadena\"\n```\n:::\n\n:::\n\nPodemos almacenar varias cadenas en un vector de texto:\n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-2_262a2d47e72e4cd48664454022a35abc'}\n\n```{.r .cell-code}\nmascotas <-  c(\"perro\",\"gato\",\"loro\",\"perro\")\n```\n:::\n\n:::\n\n## Cadenas de texto\n\n::: columns\n::: {.column width=\"50%\"}\nLos nombres de variables, objetos, y los valores en un data frame también pueden ser cadenas de texto:\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-4_75ff7564cf19595a0025bd7a1a9a9f65'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"hgeurvcwws\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#hgeurvcwws table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#hgeurvcwws thead, #hgeurvcwws tbody, #hgeurvcwws tfoot, #hgeurvcwws tr, #hgeurvcwws td, #hgeurvcwws th {\n  border-style: none;\n}\n\n#hgeurvcwws p {\n  margin: 0;\n  padding: 0;\n}\n\n#hgeurvcwws .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#hgeurvcwws .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hgeurvcwws .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hgeurvcwws .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_col_heading {\n  color: #333333;\n  background-color: #FFFF00;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hgeurvcwws .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFF00;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hgeurvcwws .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hgeurvcwws .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hgeurvcwws .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hgeurvcwws .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#hgeurvcwws .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#hgeurvcwws .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hgeurvcwws .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hgeurvcwws .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hgeurvcwws .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hgeurvcwws .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hgeurvcwws .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hgeurvcwws .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hgeurvcwws .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#hgeurvcwws .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hgeurvcwws .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hgeurvcwws .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hgeurvcwws .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hgeurvcwws .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hgeurvcwws .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hgeurvcwws .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hgeurvcwws .gt_left {\n  text-align: left;\n}\n\n#hgeurvcwws .gt_center {\n  text-align: center;\n}\n\n#hgeurvcwws .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hgeurvcwws .gt_font_normal {\n  font-weight: normal;\n}\n\n#hgeurvcwws .gt_font_bold {\n  font-weight: bold;\n}\n\n#hgeurvcwws .gt_font_italic {\n  font-style: italic;\n}\n\n#hgeurvcwws .gt_super {\n  font-size: 65%;\n}\n\n#hgeurvcwws .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#hgeurvcwws .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hgeurvcwws .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#hgeurvcwws .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#hgeurvcwws .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#hgeurvcwws .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#hgeurvcwws .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"bebida\">bebida</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"precio\">precio</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"bebida\" class=\"gt_row gt_left\" style=\"background-color: #FFFF00; font-size: 35px;\">café</td>\n<td headers=\"precio\" class=\"gt_row gt_right\">3.50</td></tr>\n    <tr><td headers=\"bebida\" class=\"gt_row gt_left\" style=\"background-color: #FFFF00; font-size: 35px;\">té</td>\n<td headers=\"precio\" class=\"gt_row gt_right\">2.99</td></tr>\n    <tr><td headers=\"bebida\" class=\"gt_row gt_left\" style=\"background-color: #FFFF00; font-size: 35px;\">jugo</td>\n<td headers=\"precio\" class=\"gt_row gt_right\">3.20</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n:::\n:::\n\n## R distingue entre mayúsculas y minúsculas\n\nLa misma letra en mayúscula y mínuscula se trata como un caracter diferente\n\n:::{.big-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-5_fe4e3e96506be8fc33b63f6102123dc7'}\n\n```{.r .cell-code}\n\"rata\"==\"RATA\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-6_7eb456104eb94f166b7b21cb311f0ce1'}\n\n```{.r .cell-code}\n\"rata\"==\"raTa\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n:::\n\n## Por defecto las expresionas regulares también distinguen entre mayúsculas y mínusculas\n\nPodemos:\n\n* Construir expresiones que no distingan\n* 'Ignorar' esta distinción al momento de empatar caracteres\n\n## ¿Para qué aprender a escribir expresiones regulares?\n\n. . . \n\n::: {.incremental}\n\n* Ahorrar tiempo al buscar patrones, transformar texto, describir patrones, extraer partes de palabras, etc.\n\n* Una sola expresión regular puede reemplazar decenas de líneas de código \n\n* Sirven en prácticamente cualquier lenguaje de programación o aplicación de línea de comandos\n\n:::\n\n## Primeros pasos con regex\n\n::: columns\n::: {.column width=\"33%\"}\n### Expresión regular\n\n</br> gato\n:::\n\n:::  {.column width=\"33%\"}\n### Entrada\n\n</br></br> \"Ese gato feo\"\n:::\n\n::: {.column width=\"33%\"}\n### Resultado\n\n</br></br> Ese [gato]{style=\"color: orange\"} feo\n:::\n:::\n\nLa expresión regular para encontrar una secuencia fija de caracteres es esa misma secuencia\n\n> busca una **g** seguida de una **a** luego **t** y **o** (todos estos caracteres juntos y en ese orden de izq. a der.)\n\n## Probando regex\n\n¿Está funcionando mi expresión?\n\n-   [rubular](https://rubular.com/) - Michael Lovitt\n\n-   [regex101](https://regex101.com/) - Firas Dib\n\n-   [regexr](https://regexr.com/) - Grant Skinner\n\n-   [regexpal](https://www.regexpal.com/) - Dan's Developer Tools\n\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\nAbrir [rubular](https://rubular.com/), [regex101](https://regex101.com/), [regexr](https://regexr.com/), o [regexpal](https://www.regexpal.com/)\n\nProbemos el primer ejemplo\n_gato_ y \"ese gato feo\"\n\n## Caracteres literales y metacaracteres\n\nTanto las cadenas de texto como las expresiones regulares se componen por caracteres\n\n</br>\n\nPodemos agrupar a los caracteres dependiendo de su comportamiento\n\n## Literales\n\nSi la entrada es **\"pato\"** y la E.R. es [pato]{style=\"color: orange\"}  \n\n</br> \n\nHabrá coincidencia cuando los caracteres [p]{style=\"color: orange\"}, [a]{style=\"color: orange\"}, [t]{style=\"color: orange\"} y [o]{style=\"color: orange\"} aparezcan consecutivamente en el texto de entrada\n\n\n## Caracteres literales\n\n[p]{style=\"color: orange\"}, [a]{style=\"color: orange\"}, [t]{style=\"color: orange\"} y [o]{style=\"color: orange\"} serían ejemplos de caracteres literales\n\n</br> Se encuentran a sí mismos\n\n## \n\n::: {.callout-note}\n##\nEl poder y la flexibilidad de las expresiones regulares viene de su capacidad de describir patrones complejos\n:::\n\n</br>\nSi un patron de texto se puede describir verbalmente, seguramente se puede codificar en una expresión regular\n\n\n## Patrones posibles\n\n- \"rata\" pero no \"bata\"\n\n- \"pollo\" pero solo si el esta secuencia está al principio de la cadena de texto\n\n- números (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n- Variantes ortográficas \"Brasil\" o \"Brazil\" \n\n- Palabras con terminaciones específicas (DAE, NAE, etc.)\n\n- Fechas\n\n- Correos electrónicos\n\n## Más posibilidades \n\n- Códigos postales\n\n- Números entre paréntesis\n\n- Usuarios de Twitter (comienzan con \\@, sin espacios ni símbolos,  \\<16 caracteres)\n\n- Palabras en MAYÚSCULA\n\n## Metacaracteres\n\nUn pequeño subconjunto de caracteres nos ayudan a describir patrones más complejos porque tienen comportamientos especiales y no se buscan solo a sí mismos.  \n\n\nCuando aparecen en una E.R., se interpretan de una manera especial.  \n\n\nIncluyen: [\\[\\]\\^\\$.\\|?\\*+()]{style=\"color: orange\"}, que están apartados para fines especiales\n\n## Comodines\n\nPara empatar caracteres desconocidos\n\n**`.`** empata cualquier caracter una vez\n\n</br>\n[m..l]{style=\"color: orange\"} empata \"[miel]{style=\"background-color: yellow\"}\" pero no \"miguel\"\n\n\n## Conjuntos de caracteres\n\nEmpatan uno o más caracteres especificados con corchetes\n\n`[ ]` para buscar conjuntos de caracteres\n\n</br>\n\n[\\[mr\\]ata]{style=\"color: orange\"} empata \"[mata]{style=\"background-color: yellow\"}\", y \"[rata]{style=\"background-color: yellow\"}\", pero no \"bata\"\n\n\n## Negando conjuntos de caracteres\n\n[\\[\\^\\]]{style=\"color: orange\"}    excluye conjuntos de caracteres \n\n> `^` va al principio del conjunto\n\n</br>\n\n[\\[\\^aoeiou\\]]{style=\"color: orange\"} solo empata consonantes\n\n[\\[\\^R\\]]{style=\"color: orange\"} todo excepto R mayúscula\n\n## Intervalos de caracteres\n\nIndican una serie de caracteres contiguos dentro de un conjunto de caracteres\n\nEl guión [-]{style=\"color: orange\"} dentro de un conjunto de caracteres sirve para abreviar secuencias alfabéticas o numéricas\n\n[\\[A-D\\]]{style=\"color: orange\"} cualquier letra mayúscula entre A y D\n\n[\\[5-8\\]]{style=\"color: orange\"} cualquier dígito entre 5 y 8\n\n[\\[A-Za-z\\]]{style=\"color: orange\"} cualquier letra\n\n\n## Aserciones de tipo límite (anchors)\n\nEspecifican la posición relativa del patrón que estamos buscando\n\n[ \\^ ]{style=\"color: orange\"}    comienza con\\\n[ \\$ ]{style=\"color: orange\"}    termina con\\\n\n</br>\n\n[  \\^mil]{style=\"color: orange\"} empata  \"[mil]{style=\"background-color: yellow\"}itar\" pero no \"familia\"\n\n[ing\\$]{style=\"color: orange\"} empata \"Bo[ing]{style=\"background-color: yellow\"}\" pero no \"ingeniero\"\n\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\n-   ¿Cómo podemos empatar  **mano**, **milo**, **malo**, y **mito**?\n\n-   ¿Cómo podemos empatar Cristian, Kristian, y Crystian usando conjuntos de caracteres?\n\n\n## Práctica {background-color=\"#a4c5ff\"}\n\n- ¿Cuál de estas E.R. empata **`mila`** al principio de una cadena de texto?\n\n::: columns\n::: {.column width=\"25\"}\na)  \\^mila\n:::\n\n::: {.column width=\"25\"}\nb)  mila\n:::\n\n::: {.column width=\"25\"}\nc)  \\$mila\n:::\n\n::: {.column width=\"25\"}\nd)  mila\\^\n:::\n:::\n\n## Cuantificadores\n\nIndican el número de caracteres o expresiones que deben coincidir\n\n[ ? ]{style=\"color: orange\"}   Cero o una\\\n[ \\* ]{style=\"color: orange\"}   Cero o más\\\n[ + ]{style=\"color: orange\"}   Una o más\\\n[ {}]{style=\"color: orange\"}    _n_ veces \n\n> los cuantificadores aplican al caracter que tienen a su izquierda\n\n## Cuantificadores\n\n[Isabell?a]{style=\"color: orange; font-weight: bold\"} coincide con \"[Isabella]{style=\"background-color: yellow\"}\" y con \"[Isabela]{style=\"background-color: yellow\"}\"\n\n> 0 o 1\n\n[go\\*l!]{style=\"color: orange; font-weight: bold\"} coincide con: \"[gl!]{style=\"background-color: yellow\"}\", \"[gol!]{style=\"background-color: yellow\"}\", \"[gooool!]{style=\"background-color: yellow\"}\", \"[goooooooool!]{style=\"background-color: yellow\"}\", etc.\n\n> 0 o más\n\n## Cuantificadores\n\n[no+]{style=\"color: orange; font-weight: bold\"} empata \"[no]{style=\"background-color: yellow\"}\", \"[nooo]{style=\"background-color: yellow\"}\", \"[noooooo]{style=\"background-color: yellow\"}\", etc, pero no \"n\"\n\n> una o más\n\n[a{2}]{style=\"color: orange; font-weight: bold\"} empata  \"port[aa]{style=\"background-color: yellow\"}viones\" pero no \"portaviones\"\n\n> n veces\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\n- Empatar **mira**, **miiiiiiiiiira**, y **miiira**  \n\n- Empatar Computador, computadora, computador, y Computadora (usar juegos de caracteres y cuantificadores)\n\n\n## Coincidencias alternativas\n\nSepara alternativas de búsqueda\n\n[ \\| ]{style=\"color: orange; font-weight: bold\"}    una u otra opción\n\n</br>\n\n[Bra(s\\|z)il]{style=\"color: orange; font-weight: bold\"} ecuentra Brasil y Brazil. \n\n> las dos alternativas van entre paréntesis\n\n## Construcciones especiales y escapes\n\n[ \\\\ ]{style=\"color: orange; font-weight: bold\"}    indica una construcción especial abreviada o sirve para poder usar caracteres especiales como literales\n\n## Escapes\n\n[qué\\\\\\\\?]{style=\"color: orange; font-weight: bold\"} para poder buscar el signo de interrogación literalmente\n\n> en R la diagonal también se tiene que escapar\n\n*Los metacaracteres dentro de conjuntos de caracteres se vuelven literales*\n\n## Construcciones especiales\n\nPara abreviar conjuntos de caracteres  \n\n[\\\\w]{style=\"color: orange; font-weight: bold\"}  letras, guión bajo, y números  \n\n[\\\\d]{style=\"color: orange; font-weight: bold\"}  dígitos  \n\n[\\\\t]{style=\"color: orange; font-weight: bold\"}tabulación  \n\n[\\\\n]{style=\"color: orange; font-weight: bold\"}   saltos de línea  \n\n[\\\\s]{style=\"color: orange; font-weight: bold\"}  espacio  \n\n[\\\\b]{style=\"color: orange; font-weight: bold\"}  límite de palabra  \n\n\n## Límites de palabra\n\n[\\\\b]{style=\"color: orange; font-weight: bold\"}\n\nMarca la posición en la que un caracter de palabra (letras, números, guión bajo) no va seguido o precedido por otro caracter de palabra (espacios o el inicio o fin de la cadena)\n\nEl límite de una palabra encontrada no se incluye en el resultado \n\n**Antes de**\n\n[\\\\bmila]{style=\"color: orange; font-weight: bold\"} encuentra \"la [mila]{style=\"background-color: yellow\"}nesa\" pero no \"Camila\"\n\n**Después de**\n\n[arte\\\\b]{style=\"color: orange; font-weight: bold\"} encuentra \"salud[arte]{style=\"background-color: yellow\"} hoy\" pero no \"artesanal\"\n\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\n- Con la entrada \"Los tacos de canasta en Tabasco se abarrotaron\"\n\nExpliquemos qué pasa cuando usamos estas tres E.R.\n\na)  ta\\\nb)  \\\\bta\\\nc)  ta\\\\b\n\n## Combinaciones\n\n[\\^can.\\*]{style=\"color: orange; font-weight: bold\"} empata \"[can]{style=\"background-color: yellow\"}\", \"[can]{style=\"background-color: yellow\"}ino\", \"[can]{style=\"background-color: yellow\"}asta\", y \"[can]{style=\"background-color: yellow\"}adiense\"\n\n\n[A.\\*n]{style=\"color: orange; font-weight: bold\"} cualquier cadena de texto que empiece con \"**A**\" y termine con \"**n**\"\n\n[\\^\\[a-z\\]+\\$]{style=\"color: orange; font-weight: bold\"} solo min núsculas\n\n\n[\\\\w+\\\\b\\$]{style=\"color: orange; font-weight: bold\"} la última palabra en una cadena\n\n\"12 de [marzo]{style=\"background-color: yellow\"}\"\\\n\"Liomys [pictus]{style=\"background-color: yellow\"}\"\n\n[\\^\\\\w+\\\\b]{style=\"color: orange; font-weight: bold\"} primera palabra\n\"[12]{style=\"background-color: yellow\"} de marzo\"\\\n\"[Liomys]{style=\"background-color: yellow\"} pictus\"\n\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\nEmpatemos:\n\n1.  Oraciones que terminen con un punto\n2.  Cuatro dígitos\n5.  Cadenas sin la letra ***s***\n\n# Expresiones regulares en R\n\n## \n\nPodemos crear subconjuntos de filas y columnas mediante coincidencias entre expresiones regulares y nombres de variables o con sus valores\n\n##\n![](imgs/regexsubconjuntos.png){fig-align=\"center\"}\n\n## 📦 `stringr`\n\nFunciones para manipular cadenas de texto\n\n- Los nombres de las funciones tienen el prefijo **`str_`**\n\n- El primer argumento de sus funciones es la cadena de texto de interés\n\n- Función **`regex()`** para modificar el comportamiento de búsqueda\n\n`ignore_case=TRUE` para dejar de distinguir entre mayúsculas y minúsculas\n\n## `stringr` - ejemplos\n\n**¿Coincidencias?**\n\n:::{.med-code}\n\n::: {.cell output-location='slide' hash='expresiones-regulares_cache/revealjs/unnamed-chunk-7_c8fddaaf68fb93013d57e4f2a6bb558d'}\n\n```{.r .cell-code}\nstr_detect(string = c(\"catalogo\", \"aguacate\",\n\"pera\"),\n pattern = \"cat\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n:::\n\nRegresa un vector V/F de la misma longitud que la entrada\n\n## `stringr` - más ejemplos\n\n**¿Cuáles elementos coinciden?**\n\n:::{.med-code}\n\n::: {.cell output-location='slide' hash='expresiones-regulares_cache/revealjs/unnamed-chunk-8_a5285f4b52dfdbde7fe07fe3e52ecb1f'}\n\n```{.r .cell-code}\nstr_which(string = c(\"catalogo\", \"aguacate\", \"pera\"), pattern = \"cat\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n:::\n\nRegresa el índice de los elemenots con coincidencias\n\n## `stringr` - reemplazar coincidencias\n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-9_4b8f78863fde828d8aab2bc34ce24fc6'}\n\n```{.r .cell-code}\nstr_replace(string = c(\"anthonyi\", \"daviesi\", \"jonesi\"),\n            pattern = \"i$\",\n            replacement = \"ii\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"anthonyii\" \"daviesii\"  \"jonesii\"  \n```\n:::\n:::\n\n:::\n\n## `stringr` - función `regex()`\n\n**Sin distinción entre MAYUSCULAS y minúsculas**\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-10_eeaa4e0c0a0d360ec9911c47223257a4'}\n\n```{.r .cell-code}\nstr_replace(string = c(\"anthonyI\", \"daviesi\", \"jonesi\"),\n            pattern = regex(\"i$\",ignore_case = TRUE),\n            replacement = \"ii\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"anthonyii\" \"daviesii\"  \"jonesii\"  \n```\n:::\n:::\n\n\n## Ejercicio - `stringr` {background-color=\"#a4c5ff\"}\n\nProbemos estas expresiones contra este vector usando `str_detect`. Explicar las coincidencias.\n\nE. regulares  \n\n1. \\^ave\\\n2. \\^\\[a-z\\]+\\$\\\n3. \\\\d\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-11_bfd9b309ed87d9a60b19fb186259f922'}\n\n```{.r .cell-code}\nvec_texto <- c(\"Aves y reptiles\",\"hamburguesa\",\n                 \"34\",\"(34)\",\"rAta\",\"avenida\",\n                 \"2011_julio\",\"inecol\",\"INECOL\")\n```\n:::\n\n\n## Manipulando datos con expresiones regulares\n\n</br>\n\nElegir/descartar filas y columnas  \n\nReemplazar o modificar valores  \n\nExtraer o borrar partes de cadenas de texto  \n\n## Expresiones regulares y 📦 `dplyr` \n\n</br>\n\nLa función auxiliar **`matches()`** acepta expresiones regulares para seleccionar variables que contengan coincidencias\n\n\n## Seleccionando variables\n\nDatos de pingüinos `pinguinos` de 📦 `datos`\n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-12_8e7004d9526fc26578d555934b7d6e67'}\n\n```{.r .cell-code}\nlibrary(datos)\ndata(pinguinos)\nnames(pinguinos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"especie\"         \"isla\"            \"largo_pico_mm\"   \"alto_pico_mm\"   \n[5] \"largo_aleta_mm\"  \"masa_corporal_g\" \"sexo\"            \"anio\"           \n```\n:::\n:::\n\n:::\n\n## \n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-13_eb8711d9a5ecf8706a6d5be430a53e68'}\n\n```{.r .cell-code}\npinguinos %>% \n  select(especie, matches(\"larg\")) %>% \n  sample_n(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  especie largo_pico_mm largo_aleta_mm\n  <fct>           <dbl>          <int>\n1 Adelia           39.6            191\n2 Adelia           38.6            199\n3 Papúa            49.5            224\n```\n:::\n:::\n\n:::\n\n## Filtrando filas \n\nDatos de paises del paquete 📦 `datos`\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-14_9649304f6511287a4821ff11805b2365'}\n\n```{.r .cell-code}\nlibrary(datos)\ndata(paises)\n```\n:::\n\n\n:::{.med-code}\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-15_5d643f67e40ce6a585c847557d057fdd'}\n\n```{.r .cell-code}\npaises %>% select(pais,continente) %>% \n  sample_n(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  pais       continente\n  <fct>      <fct>     \n1 Etiopía    África    \n2 Chad       África    \n3 Colombia   Américas  \n4 Montenegro Europa    \n```\n:::\n:::\n\n:::\n\n## Coincidencias en filas\n\nPaises con \"z\" en su nombre\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-16_615aaefe23300812438c513275d8570e'}\n\n```{.r .cell-code}\npaises %>% select(pais,continente) %>% \n  filter(str_detect(pais,\"z\")) %>% \n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  pais                 continente\n  <fct>                <fct>     \n1 Bosnia y Herzegovina Europa    \n2 Mozambique           África    \n3 Swazilandia          África    \n4 Suiza                Europa    \n5 Tanzania             África    \n6 Túnez                África    \n7 Venezuela            Américas  \n```\n:::\n:::\n\n\n\n# Información repetida\n\n## Valores repetidos\n\n-   Definición variable pero generalmente dos o más copias del mismo registro u observación\n\n### Problemas posibles\n\n-   Inflán datos\n\n-   Costos de repetición no intencional\n\n-   Resultados imprecisos\n\n## Identificando y eliminando duplicados\n\n-   Identificar con `get_dupes()` del paquete 📦 `janitor`\n\n-   Eliminar con `distinct()` de 📦 `dplyr`\n\n## Repetición\n\n-   En todas las variables (copias idénticas de una fila)\n\n-   En las variables que definen nuestras unidades observacionales\n\n-   En conjuntos arbitrarios de variables\n\n## \n\n::: panel-tabset\n\n### ordenes_pizza\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-17_a2edf1409830afa0da672602e21a95cb'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"ctusigyibs\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ctusigyibs table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ctusigyibs thead, #ctusigyibs tbody, #ctusigyibs tfoot, #ctusigyibs tr, #ctusigyibs td, #ctusigyibs th {\n  border-style: none;\n}\n\n#ctusigyibs p {\n  margin: 0;\n  padding: 0;\n}\n\n#ctusigyibs .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ctusigyibs .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ctusigyibs .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ctusigyibs .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ctusigyibs .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ctusigyibs .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ctusigyibs .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ctusigyibs .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ctusigyibs .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ctusigyibs .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ctusigyibs .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ctusigyibs .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ctusigyibs .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ctusigyibs .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ctusigyibs .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ctusigyibs .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ctusigyibs .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ctusigyibs .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ctusigyibs .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ctusigyibs .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ctusigyibs .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ctusigyibs .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ctusigyibs .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ctusigyibs .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ctusigyibs .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ctusigyibs .gt_left {\n  text-align: left;\n}\n\n#ctusigyibs .gt_center {\n  text-align: center;\n}\n\n#ctusigyibs .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ctusigyibs .gt_font_normal {\n  font-weight: normal;\n}\n\n#ctusigyibs .gt_font_bold {\n  font-weight: bold;\n}\n\n#ctusigyibs .gt_font_italic {\n  font-style: italic;\n}\n\n#ctusigyibs .gt_super {\n  font-size: 65%;\n}\n\n#ctusigyibs .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ctusigyibs .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ctusigyibs .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ctusigyibs .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ctusigyibs .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ctusigyibs .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ctusigyibs .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 26px;\" scope=\"col\" id=\"IDusuario\">IDusuario</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 26px;\" scope=\"col\" id=\"Direccion\">Direccion</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 26px;\" scope=\"col\" id=\"Colonia\">Colonia</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"font-size: 26px;\" scope=\"col\" id=\"Alcaldia\">Alcaldia</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Pablitoo</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Cafetal 395 Casa 2</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">San Angel</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">susana24</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Fresnos 114</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">San Angel</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">susana24</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Fresnos 114</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">San Angel</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">jd.adriana</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Cafetal 395 Casa 8</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">San Angel</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">JuanManuel</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Hidalgo 11 Depto 1B</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Campestre</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">JoaquinED</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Hidalgo 11 Depto 1B</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Campestre</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n    <tr><td headers=\"IDusuario\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">e_ric2</td>\n<td headers=\"Direccion\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Hidalgo 11 Depto 1B</td>\n<td headers=\"Colonia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">Campestre</td>\n<td headers=\"Alcaldia\" class=\"gt_row gt_left\" style=\"font-size: 26px;\">A. Obregón</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n### datos\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-18_b4919b949da9feca9e69ee60e73f4143'}\n\n```{.r .cell-code}\nordenes_pizza <- \ntibble::tribble(\n    ~IDusuario,            ~Direccion,    ~Colonia,    ~Alcaldia,\n    \"Pablitoo\",  \"Cafetal 395 Casa 2\", \"San Angel\", \"A. Obregón\",\n    \"susana24\",         \"Fresnos 114\", \"San Angel\", \"A. Obregón\",\n    \"susana24\",         \"Fresnos 114\", \"San Angel\", \"A. Obregón\",\n  \"jd.adriana\",  \"Cafetal 395 Casa 8\", \"San Angel\", \"A. Obregón\",\n  \"JuanManuel\", \"Hidalgo 11 Depto 1B\", \"Campestre\", \"A. Obregón\",\n   \"JoaquinED\", \"Hidalgo 11 Depto 1B\", \"Campestre\", \"A. Obregón\",\n      \"e_ric2\", \"Hidalgo 11 Depto 1B\", \"Campestre\", \"A. Obregón\"\n  )\n```\n:::\n\n:::\n\n## Identificar con `get_dupes()` \n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-19_2ee8f9b02003cd7b78725b16e0fdec25'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  get_dupes() # todas las variables (por defecto)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  IDusuario Direccion   Colonia   Alcaldia   dupe_count\n  <chr>     <chr>       <chr>     <chr>           <int>\n1 susana24  Fresnos 114 San Angel A. Obregón          2\n2 susana24  Fresnos 114 San Angel A. Obregón          2\n```\n:::\n:::\n\n\n-   Añade una variable `dupe_count` que cuantifica las filas con valores duplicados\n\n-   Acomoda las variables de interés al principio del data frame resultante\n\n## \n\n`get_dupes()` asignando una variable para definir nuestra unidad observacional\n\n¿Alguien ordenó más de una vez?\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-20_d3b58224370a841e006dbfe53b89350e'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  get_dupes(IDusuario)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  IDusuario dupe_count Direccion   Colonia   Alcaldia  \n  <chr>          <int> <chr>       <chr>     <chr>     \n1 susana24           2 Fresnos 114 San Angel A. Obregón\n2 susana24           2 Fresnos 114 San Angel A. Obregón\n```\n:::\n:::\n\n\n## \n\n`get_dupes()` con combinaciones de variables\n\n-   Filas repetidas en dirección \\* colonia\n\n> accepta funciones auxiliares de 📦 `tidyselect`\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-21_2bda706eba13be8c569a5b3b8667f6d7'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  get_dupes(Direccion, starts_with(\"Col\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n  Direccion           Colonia   dupe_count IDusuario  Alcaldia  \n  <chr>               <chr>          <int> <chr>      <chr>     \n1 Hidalgo 11 Depto 1B Campestre          3 JuanManuel A. Obregón\n2 Hidalgo 11 Depto 1B Campestre          3 JoaquinED  A. Obregón\n3 Hidalgo 11 Depto 1B Campestre          3 e_ric2     A. Obregón\n4 Fresnos 114         San Angel          2 susana24   A. Obregón\n5 Fresnos 114         San Angel          2 susana24   A. Obregón\n```\n:::\n:::\n\n\n## \n\nDescartar con `distinct()` de 📦 `dplyr`\n\n. . .\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-22_1f9a1a1bcab4f4826f66e4312f1218ae'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  distinct() # todas las variables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  IDusuario  Direccion           Colonia   Alcaldia  \n  <chr>      <chr>               <chr>     <chr>     \n1 Pablitoo   Cafetal 395 Casa 2  San Angel A. Obregón\n2 susana24   Fresnos 114         San Angel A. Obregón\n3 jd.adriana Cafetal 395 Casa 8  San Angel A. Obregón\n4 JuanManuel Hidalgo 11 Depto 1B Campestre A. Obregón\n5 JoaquinED  Hidalgo 11 Depto 1B Campestre A. Obregón\n6 e_ric2     Hidalgo 11 Depto 1B Campestre A. Obregón\n```\n:::\n:::\n\n\n## \n\n`distinct()` con la variables que definen las unidades observacionales\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-23_53ab8ed3d3399940c8c3d5c95a441304'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  distinct(IDusuario, .keep_all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  IDusuario  Direccion           Colonia   Alcaldia  \n  <chr>      <chr>               <chr>     <chr>     \n1 Pablitoo   Cafetal 395 Casa 2  San Angel A. Obregón\n2 susana24   Fresnos 114         San Angel A. Obregón\n3 jd.adriana Cafetal 395 Casa 8  San Angel A. Obregón\n4 JuanManuel Hidalgo 11 Depto 1B Campestre A. Obregón\n5 JoaquinED  Hidalgo 11 Depto 1B Campestre A. Obregón\n6 e_ric2     Hidalgo 11 Depto 1B Campestre A. Obregón\n```\n:::\n:::\n\n\n> `.keep_all` para retener o no las demás columnas\n\n## \n\n`distinct()` con combinaciones de variables\n\n-   Combinaciones únicas de dirección \\* colonia\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-24_f345765b07f85ebef7d6c469d6f92920'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  distinct(Direccion,Colonia)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  Direccion           Colonia  \n  <chr>               <chr>    \n1 Cafetal 395 Casa 2  San Angel\n2 Fresnos 114         San Angel\n3 Cafetal 395 Casa 8  San Angel\n4 Hidalgo 11 Depto 1B Campestre\n```\n:::\n:::\n\n\n## \n\n> ⚠️ Si `.keep_all = TRUE` y hay valores duplicados en otras variables, `distinct` solo retiene la primera fila\n\n\n::: {.cell hash='expresiones-regulares_cache/revealjs/unnamed-chunk-25_439d98b4a166c4ba203366d5dfe0fbbc'}\n\n```{.r .cell-code}\nordenes_pizza %>%\n  distinct(Direccion,Colonia, .keep_all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  IDusuario  Direccion           Colonia   Alcaldia  \n  <chr>      <chr>               <chr>     <chr>     \n1 Pablitoo   Cafetal 395 Casa 2  San Angel A. Obregón\n2 susana24   Fresnos 114         San Angel A. Obregón\n3 jd.adriana Cafetal 395 Casa 8  San Angel A. Obregón\n4 JuanManuel Hidalgo 11 Depto 1B Campestre A. Obregón\n```\n:::\n:::\n\n\n## Ejercicio {background-color=\"#a4c5ff\"}\n\n- Cargar el archivo `murcielagos.csv`\n\n- ¿De cuántas localidades únicas provienen estos registros?\n\n- Exportar un archivo con las localidades únicas y nombres de columna en español\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}